/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$setPrefixes', '$rollWorldOfDarkness', '$empty?', '$=~', '$gsub', '$to_i', '$<', '$+', '$to_s', '$rollDiceWorldOfDarknessSpecial', '$>', '$new', '$times', '$roll', '$===', '$-', '$[]=', '$sort!', '$each', '$chop']);
  return (function($base, $super) {
    function $WorldOfDarkness(){};
    var self = $WorldOfDarkness = $klass($base, $super, 'WorldOfDarkness', $WorldOfDarkness);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_10, TMP_13;

    def.rerollDice = def.successDice = def.botchDice = nil;
    self.$setPrefixes(["\\d+st.*"]);

    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      self.successDice = 0;
      self.botchDice = 0;
      return self.rerollDice = 0;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "ワールドオブダークネス";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "WorldOfDarkness";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "・判定コマンド(xSTn+y or xSTSn+y)\n　(ダイス個数)ST(難易度)+(自動成功)\n　(ダイス個数)STS(難易度)+(自動成功)　※出目10で振り足し\n\n　難易度=省略時6\n　自動成功=省略時0\n\n　例）3ST7　5ST+1　4ST5+2\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, self = this, result = nil;

      result = self.$rollWorldOfDarkness(command);
      if ((($a = (result['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return result
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$rollWorldOfDarkness', TMP_10 = function $$rollWorldOfDarkness(string) {
      var $a, $b, TMP_6, $c, TMP_7, $d, TMP_8, $e, TMP_9, $f, self = this, diceCount = nil, difficulty = nil, automaticSuccess = nil, output = nil, rerollNumber = nil;

      diceCount = 1;
      difficulty = 6;
      automaticSuccess = 0;
      output = "";
      rerollNumber = 11;
      if ((($a = /STS/['$=~'](string)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        string = ($a = ($b = string).$gsub, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c;

        return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "STS" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + "[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3))) + "]"}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, /(\d+)STS(\d*)([^\d\s][\+\-\d]+)/i);
        if ((($a = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          string = ($a = ($c = string).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $d;

          return "" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](1))) + "STS" + ((($d = $gvars['~']) === nil ? nil : $d['$[]'](2)))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($c, /(\d+)STS(\d*)/i)
        };
        rerollNumber = 10;
        } else {
        string = ($a = ($d = string).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $e;

        return "" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](1))) + "ST" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](2))) + "[" + ((($e = $gvars['~']) === nil ? nil : $e['$[]'](3))) + "]"}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($d, /(\d+)ST(\d*)([^\d\s][\+\-\d]+)/i);
        if ((($a = (($e = $gvars['~']) === nil ? nil : $e['$[]'](3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          string = ($a = ($e = string).$gsub, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $f;

          return "" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](1))) + "ST" + ((($f = $gvars['~']) === nil ? nil : $f['$[]'](2)))}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($e, /(\d+)ST(\d*)/i)
        };
      };
      if ((($a = (($f = $gvars['~']) === nil ? nil : $f['$[]'](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceCount = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i()};
      if ((($a = (($f = $gvars['~']) === nil ? nil : $f['$[]'](2))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        difficulty = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$to_i()};
      if ((($a = $rb_lt(difficulty, 2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        difficulty = 6};
      if ((($a = (($f = $gvars['~']) === nil ? nil : $f['$[]'](3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        automaticSuccess = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)).$to_i()};
      output = $rb_plus($rb_plus($rb_plus($rb_plus($rb_plus("DicePool=", diceCount.$to_s()), ", Difficulty="), difficulty.$to_s()), ", AutomaticSuccess="), automaticSuccess.$to_s());
      self.successDice = 0;
      self.botchDice = 0;
      self.rerollDice = 0;
      output = $rb_plus(output, self.$rollDiceWorldOfDarknessSpecial(diceCount, difficulty, rerollNumber));
      while ((($f = $rb_gt(self.rerollDice, 0)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
      diceCount = self.rerollDice;
      self.rerollDice = 0;
      output = $rb_plus(output, self.$rollDiceWorldOfDarknessSpecial(diceCount, difficulty, rerollNumber));};
      self.successDice = $rb_plus(self.successDice, automaticSuccess);
      if ((($a = $rb_gt(self.successDice, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, $rb_plus(" ＞ 成功数", self.successDice.$to_s()))
      } else if ((($a = $rb_gt(self.botchDice, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        output = $rb_plus(output, " ＞ 大失敗")
        } else {
        output = $rb_plus(output, " ＞ 失敗")
      };
      return output;
    }, TMP_10.$$arity = 1);

    return (Opal.defn(self, '$rollDiceWorldOfDarknessSpecial', TMP_13 = function $$rollDiceWorldOfDarknessSpecial(diceCount, difficulty, rerollNumber) {
      var $a, $b, TMP_11, $c, TMP_12, self = this, diceType = nil, diceResults = nil, result = nil;

      diceType = 10;
      diceResults = $scope.get('Array').$new(diceCount);
      ($a = ($b = diceCount).$times, $a.$$p = (TMP_11 = function(i){var self = TMP_11.$$s || this, $c, $d, dice_now = nil, $case = nil;
        if (self.successDice == null) self.successDice = nil;
        if (self.rerollDice == null) self.rerollDice = nil;
        if (self.botchDice == null) self.botchDice = nil;
if (i == null) i = nil;
      $d = self.$roll(1, diceType), $c = Opal.to_ary($d), dice_now = ($c[0] == null ? nil : $c[0]), $d;
        $case = dice_now;if ($range(rerollNumber, 12, false)['$===']($case)) {self.successDice = $rb_plus(self.successDice, 1);
        self.rerollDice = $rb_plus(self.rerollDice, 1);}else if ($range(difficulty, 11, false)['$===']($case)) {self.successDice = $rb_plus(self.successDice, 1)}else if ((1)['$===']($case)) {self.successDice = $rb_minus(self.successDice, 1);
        self.botchDice = $rb_plus(self.botchDice, 1);};
        return diceResults['$[]='](i, dice_now);}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
      diceResults['$sort!']();
      result = " ＞ ";
      ($a = ($c = diceResults).$each, $a.$$p = (TMP_12 = function(diceResult){var self = TMP_12.$$s || this;
if (diceResult == null) diceResult = nil;
      return result = $rb_plus(result, $rb_plus(diceResult.$to_s(), ","))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
      result = result.$chop();
      return result;
    }, TMP_13.$$arity = 3), nil) && 'rollDiceWorldOfDarknessSpecial';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
