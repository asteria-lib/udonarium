/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$setPrefixes', '$===', '$to_i', '$!', '$nil?', '$*', '$checkRoll', '$>', '$+', '$<', '$checkDamage', '$<=', '$roll', '$gsub', '$collect', '$split', '$map!', '$-', '$join', '$sort', '$select', '$>=', '$size', '$count', '$reverse', '$delete', '$slice', '$inject', '$new', '$each', '$push']);
  return (function($base, $super) {
    function $Raisondetre(){};
    var self = $Raisondetre = $klass($base, $super, 'Raisondetre', $Raisondetre);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_9, TMP_13;

    def.sortTye = nil;
    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    self.$setPrefixes(["(-)?(\\d+)?RD(\\d+)?(@(\\d+))?", "(-)?(\\d+)?DD([1-9])?([\\+\\-]\\d+)?"]);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "叛逆レゾンデートル";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Raisondetre";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "判定：[判定値]RD[技能][@目標値]\nダメージロール：[ダイス数]DD[装甲]\n\n[]内のコマンドは省略可能。\n「判定値」で判定に使用するダイス数を指定。省略時は「1」。0以下も指定可。\n「技能」で有効なダイス数を指定。省略時は「1」。\n達成値はクリティカルを含めて、「最も高くなる」ように計算します。\n「@目標値」指定で、判定の成否を追加表示します。\n\nダメージロールは[装甲]指定で、有効なダイス数と0の出目の数を表示します。\n[装甲]省略時は、ダイス結果のみ表示します。（複数の対象への攻撃時用）\n\n【書式例】\n・RD → 1Dで達成値を表示。\n・2RD1@8 → 2D（1個選択）で目標値8の判定。\n・-3RD → 1Dでダイスペナルティ-4の判定。\n・4DD2 → 4Dで装甲2のダメージロール。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, diceCount = nil, choiceCount = nil, target = nil, armor = nil;

      if ((($a = /(-)?(\d+)?RD(\d+)?(@(\d+))?$/i['$==='](command)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceCount = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) !== false && $a !== nil && $a != null) ? $a : 1)).$to_i();
        if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$nil?']()['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          diceCount = $rb_times(diceCount, -1)};
        choiceCount = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))) !== false && $a !== nil && $a != null) ? $a : 1)).$to_i();
        target = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](5))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i();
        return self.$checkRoll(diceCount, choiceCount, target);
      } else if ((($a = /(-)?(\d+)?DD([1-9])?([\+\-]\d+)?$/i['$==='](command)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceCount = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) !== false && $a !== nil && $a != null) ? $a : 1)).$to_i();
        if ((($a = ((($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$nil?']()['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          diceCount = $rb_times(diceCount, -1)};
        armor = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i();
        if ((($a = ($rb_gt(armor, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          armor = $rb_plus(armor, (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i());
          if ((($a = ($rb_lt(armor, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            armor = 1};
          if ((($a = ($rb_gt(armor, 9))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            armor = 9};};
        return self.$checkDamage(diceCount, armor);};
      return nil;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$checkRoll', TMP_9 = function $$checkRoll(diceCount, choiceCount, target) {
      var $a, $b, TMP_6, $c, TMP_7, $d, TMP_8, self = this, correction = nil, rollCount = nil, dice = nil, diceText = nil, diceText2 = nil, diceArray = nil, funbleArray = nil, isFunble = nil, success = nil, criticalCount = nil, critical = nil, choiceArray = nil, choiceText = nil, result = nil;

      if ((($a = $rb_le(diceCount, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        correction = $rb_plus(1, $rb_times(diceCount, -1));
        rollCount = 1;
        } else {
        correction = 0;
        rollCount = diceCount;
      };
      $b = self.$roll(rollCount, 10, self.sortTye), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      diceText2 = diceText.$gsub("10", "0");
      diceArray = ($a = ($b = diceText2.$split(/,/)).$collect, $a.$$p = (TMP_6 = function(i){var self = TMP_6.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
      ($a = ($c = diceArray)['$map!'], $a.$$p = (TMP_7 = function(i){var self = TMP_7.$$s || this;
if (i == null) i = nil;
      return $rb_minus(i, correction)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c);
      diceText2 = (diceArray.$sort()).$join(",");
      funbleArray = ($a = ($d = diceArray).$select, $a.$$p = (TMP_8 = function(i){var self = TMP_8.$$s || this;
if (i == null) i = nil;
      return $rb_le(i, 1)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($d);
      isFunble = ($rb_ge(funbleArray.$size(), rollCount));
      dice = 0;
      success = 0;
      if ((($a = (isFunble['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        criticalCount = diceArray.$count(0);
        critical = $rb_times(criticalCount, 10);
        choiceArray = diceArray.$reverse();
        choiceArray.$delete(0);
        choiceArray = choiceArray.$slice($range(0, ($rb_minus(choiceCount, 1)), false));
        choiceText = choiceArray.$join(",");
        dice = choiceArray.$inject("+");
        success = $rb_plus(dice, critical);};
      result = "" + (rollCount) + "D10";
      if ((($a = ($rb_gt(correction, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "-" + (correction))};
      result = $rb_plus(result, " ＞ [" + (diceText) + "] ＞ [" + (diceText2) + "] ＞ ");
      if ((($a = (isFunble)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "達成値：0 (Funble)")
        } else {
        result = $rb_plus(result, "" + (dice) + "[" + (choiceText) + "]");
        if ((($a = ($rb_gt(critical, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "+" + (critical))};
        result = $rb_plus(result, "=達成値：" + (success));
        if ((($a = ($rb_gt(critical, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, " (" + (criticalCount) + "Critical)")};
      };
      if ((($a = ($rb_gt(target, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ">=" + (target) + " ");
        if ((($a = ($rb_ge(success, target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "【成功】")};
        if ((($a = ($rb_lt(success, target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "【失敗】")};};
      return result;
    }, TMP_9.$$arity = 3);

    return (Opal.defn(self, '$checkDamage', TMP_13 = function $$checkDamage(diceCount, armor) {
      var $a, $b, TMP_10, $c, TMP_11, $d, TMP_12, self = this, correction = nil, rollCount = nil, dice = nil, diceText = nil, diceText2 = nil, diceArray = nil, criticalCount = nil, result = nil, resultArray = nil, success = nil, resultText = nil;

      if ((($a = $rb_le(diceCount, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        correction = $rb_plus(1, $rb_times(diceCount, -1));
        rollCount = 1;
        } else {
        correction = 0;
        rollCount = diceCount;
      };
      $b = self.$roll(rollCount, 10, self.sortTye), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      diceText2 = diceText.$gsub("10", "0");
      diceArray = (($a = ($b = diceText2.$split(/,/)).$collect, $a.$$p = (TMP_10 = function(i){var self = TMP_10.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b)).$sort();
      criticalCount = diceArray.$count(0);
      ($a = ($c = diceArray)['$map!'], $a.$$p = (TMP_11 = function(i){var self = TMP_11.$$s || this;
if (i == null) i = nil;
      return $rb_minus(i, correction)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($c);
      diceText2 = diceArray.$join(",");
      result = "" + (rollCount) + "D10";
      if ((($a = ($rb_gt(correction, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "-" + (correction))};
      result = $rb_plus(result, " ＞ [" + (diceText) + "] ＞ [" + (diceText2) + "]");
      if ((($a = ($rb_gt(armor, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        resultArray = $scope.get('Array').$new();
        success = 0;
        ($a = ($d = diceArray).$each, $a.$$p = (TMP_12 = function(i){var self = TMP_12.$$s || this, $e;
if (i == null) i = nil;
        if ((($e = ($rb_ge(i, armor))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            resultArray.$push(i);
            return success = $rb_plus(success, 1);
            } else {
            return resultArray.$push("×")
          }}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($d);
        resultText = resultArray.$join(",");
        result = $rb_plus(result, " ＞ [" + (resultText) + "]>=" + (armor) + " 有効数：" + (success));};
      result = $rb_plus(result, "　0=" + (criticalCount) + "個");
      return result;
    }, TMP_13.$$arity = 2), nil) && 'checkDamage';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
