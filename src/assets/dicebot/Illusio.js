/* Generated by Opal 0.10.5 */
(function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$setPrefixes', '$===', '$to_i', '$delete', '$sort', '$uniq', '$!', '$nil?', '$checkRoll', '$roll', '$collect', '$split', '$new', '$each', '$>', '$count', '$push', '$+', '$join', '$<']);
  return (function($base, $super) {
    function $Illusio(){};
    var self = $Illusio = $klass($base, $super, 'Illusio', $Illusio);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_8;

    def.sortTye = nil;
    Opal.defn(self, '$initialize', TMP_1 = function $$initialize() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_1.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      return self.sortType = 1;
    }, TMP_1.$$arity = 0);

    self.$setPrefixes(["(\\d+)?IL([1-6])?([1-6])?([1-6])?([1-6])?([1-6])?([1-6])?(P)?"]);

    Opal.defn(self, '$gameName', TMP_2 = function $$gameName() {
      var self = this;

      return "晃天のイルージオ";
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$gameType', TMP_3 = function $$gameType() {
      var self = this;

      return "Illusio";
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$getHelpMessage', TMP_4 = function $$getHelpMessage() {
      var self = this;

      return "判定：[n]IL(BNo)[P]\n\n[]内のコマンドは省略可能。\n「n」でダイス数を指定。省略時は「1」。\n(BNo)でブロックナンバーを指定。「236」のように記述。順不同可。\nコマンド末に「P」を指定で、(BNo)のパリィ判定。（一応、複数指定可）\n\n【書式例】\n・6IL236 → 6dでブロックナンバー「2,3,6」の判定。\n・IL4512 → 1dでブロックナンバー「1,2,4,5」の判定。\n・2IL1P → 2dでパリィナンバー「1」の判定。\n";
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$rollDiceCommand', TMP_5 = function $$rollDiceCommand(command) {
      var $a, $b, self = this, diceCount = nil, blockNo = nil, isParry = nil;

      if ((($a = /(\d+)?IL([1-6])?([1-6])?([1-6])?([1-6])?([1-6])?([1-6])?(P)?$/i['$==='](command)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        diceCount = (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))) !== false && $a !== nil && $a != null) ? $a : 1)).$to_i();
        blockNo = [(((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i(), (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i(), (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i(), (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](5))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i(), (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](6))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i(), (((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](7))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i()];
        blockNo.$delete(0);
        blockNo = blockNo.$sort();
        blockNo = blockNo.$uniq();
        isParry = (($a = $gvars['~']) === nil ? nil : $a['$[]'](8))['$nil?']()['$!']();
        return self.$checkRoll(diceCount, blockNo, isParry);};
      return nil;
    }, TMP_5.$$arity = 1);

    return (Opal.defn(self, '$checkRoll', TMP_8 = function $$checkRoll(diceCount, blockNo, isParry) {
      var $a, $b, TMP_6, $c, TMP_7, self = this, dice = nil, diceText = nil, diceArray = nil, resultArray = nil, success = nil, blockText = nil, blockText2 = nil, resultText = nil, result = nil;

      $b = self.$roll(diceCount, 6, self.sortTye), $a = Opal.to_ary($b), dice = ($a[0] == null ? nil : $a[0]), diceText = ($a[1] == null ? nil : $a[1]), $b;
      diceArray = ($a = ($b = diceText.$split(/,/)).$collect, $a.$$p = (TMP_6 = function(i){var self = TMP_6.$$s || this;
if (i == null) i = nil;
      return i.$to_i()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
      resultArray = $scope.get('Array').$new();
      success = 0;
      ($a = ($c = diceArray).$each, $a.$$p = (TMP_7 = function(i){var self = TMP_7.$$s || this, $d;
if (i == null) i = nil;
      if ((($d = ($rb_gt(blockNo.$count(i), 0))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return resultArray.$push("×")
          } else {
          resultArray.$push(i);
          return success = $rb_plus(success, 1);
        }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c);
      blockText = blockNo.$join(",");
      blockText2 = "Block";
      if ((($a = (isParry)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        blockText2 = "Parry"};
      resultText = resultArray.$join(",");
      result = "" + (diceCount) + "D6(" + (blockText2) + ":" + (blockText) + ") ＞ " + (diceText) + " ＞ " + (resultText) + " ＞ ";
      if ((($a = (isParry)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($rb_lt(success, diceCount))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = $rb_plus(result, "パリィ成立！　次の非ダメージ2倍。")
          } else {
          result = $rb_plus(result, "成功数：" + (success) + "　パリィ失敗")
        }
        } else {
        result = $rb_plus(result, "成功数：" + (success))
      };
      return result;
    }, TMP_8.$$arity = 3), nil) && 'checkRoll';
  })($scope.base, $scope.get('DiceBot'))
})(Opal);

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
